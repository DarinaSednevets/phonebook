{"version":3,"sources":["components/ContactsForm/ContactsForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","App.js","index.js","components/ContactsForm/ContactsForm.module.css","components/ContactList/ContactList.module.css"],"names":["ContactsForm","state","name","number","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","this","className","s","form","inputName","type","pattern","title","required","onChange","disabled","formBtn","Component","Filter","ContactList","contacts","onDeleteContact","ContactsList","map","id","ContactsItem","onClick","App","initialContacts","filter","addContact","some","elm","console","log","alert","contact","shortId","generate","changeFilter","getFilteredContacts","normalizedFilter","toLowerCase","includes","deleteContact","contactId","filteredContacts","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5d0d7c11.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport s from './ContactsForm.module.css';\n\nclass ContactsForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  //ввод данных\n  handleChange = event => {\n    // console.log(event.currentTarget.value);\n\n    const { name, value } = event.currentTarget;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  // для отправки (submit) формы\n  handleSubmit = event => {\n    event.preventDefault();\n    // console.log(this.state);\n\n    //   во время отправки (submit) формы обращаемся к prop onSubmit={this.addContact} для передачи данных из  state (name, number) в App\n    this.props.onSubmit(this.state);\n\n    // вызов reset для очистки  данных формы,\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className={s.form}>\n        <label>\n          Name\n          <input\n            className={s.inputName}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\n            title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <button\n          type=\"submit\"\n          disabled={!this.state.name || !this.state.number}\n          className={s.formBtn}\n        >\n          Add Contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactsForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactsForm;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contacts by name\n    <br />\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className={s.ContactsList}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.ContactsItem}>\n          {name}: {number}\n          <button\n            type=\"button\"\n            onClick={() => {\n              onDeleteContact(id);\n            }}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React, { Component } from 'react';\n\nimport shortId from 'shortid'; //npm для создания уникальных ID\n\n// Components\nimport ContactsForm from './components/ContactsForm';\n\nimport Filter from './components/Filter';\n\nimport ContactList from './components/ContactList';\n\n// Data\nimport initialContacts from './components/ContactList/initialContacts.json'; //data for ContactList\n\nclass App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: '',\n  };\n\n  // чтобы при отравке (submit) формы получить доступ к state из ContactForm.js. Это можно сделать через props. В параметрах деструктуризуруем ключи name,number из state\n\n  // во время submit ContactForm нужно получить из нее данные, чтобы добавить  еще один contacts с ее данными. Передаем этом метод с помощью prop для ContactsForm\n  addContact = ({ name, number }) => {\n    // console.log(name);\n    // console.log(number);\n\n    //проверка на возможность добавлять контакты, имена которых уже есть в телефонной книге. При попытке выполнить такое действие выводим alert с предупреждением.\n    // console.log(this.state.contacts.id);\n    // console.log(name);\n    if (this.state.contacts.some(elm => elm.name === name)) {\n      console.log(alert(`${name} is already in contacts`));\n      return;\n    }\n    // создаем contact, и добавляем его в state\n    const contact = {\n      id: shortId.generate(), //присваиваем уникальный ID\n      name,\n      number,\n    };\n\n    // для обновления state, когда мы хотим в него что-либо добавить, сначала делаем новый массив, в который распыляем старый, и добавляем новый элемент в начало или конец массива [...старый[], элемент]\n    this.setState(({ contacts }) => ({\n      contacts: [contact, ...contacts],\n    }));\n  };\n\n  // для фильтрации. для передачи данныx при onChange\n  changeFilter = event => {\n    this.setState({\n      filter: event.currentTarget.value,\n    });\n  };\n\n  // вычисляемые свойства для фильтрации. Отфильтровываем те contacts, которые includes то, что мы записали в input Фильтр по имени и в ContactList рендерим не все <ContactList\n  //   contacts={contacts}, а только отфильтрованые, т.е.  contacts={filteredContacts}/>\n  getFilteredContacts = () => {\n    // для чистоты кода выведем this.state.filter.toLowerCase() в отдельную переменную\n    const normalizedFilter = this.state.filter.toLowerCase();\n\n    return this.state.contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  // для удаления элемента в ContactList при onClick на кнопку. Обращаемся к id элемента.\n  deleteContact = contactId => {\n    this.setState(({ contacts }) => ({\n      contacts: contacts.filter(contact => contact.id !== contactId), //берем предыдущий contacts и отфильтровываем все элементы, кроме того у которого id совпадает\n    }));\n  };\n\n  render() {\n    const filteredContacts = this.getFilteredContacts();\n\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        {/* ContactsForm чтобы при отравке (submit) формы получить доступ к state из Form.js добавляем prop onSubmit методом для этого */}\n\n        <ContactsForm onSubmit={this.addContact} />\n\n        <h2>Contacts</h2>\n        {/* Filter */}\n        <Filter value={this.state.filter} onChange={this.changeFilter} />\n\n        {/* ContactList */}\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css'; //подключение стилей для normalize\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__2KRB7\",\"inputName\":\"ContactsForm_inputName__3yXZH\",\"formBtn\":\"ContactsForm_formBtn__2yNBQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactsList\":\"ContactList_ContactsList__1mtZm\",\"ContactsItem\":\"ContactList_ContactsItem__2hzZA\"};"],"sourceRoot":""}